// CartController.java
package com.yourcompany.onlineshop.controller;

import com.yourcompany.onlineshop.service.CartService;
import com.yourcompany.onlineshop.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Map;

@Controller
@RequestMapping("/cart")
@SessionAttributes("cartService") // 세션 스코프를 활용하여 장바구니 데이터를 유지
public class CartController {

    @Autowired
    private CartService cartService; // 가상의 CartService
    @Autowired
    private OrderService orderService;

    // @SessionAttributes 어노테이션 사용 시, 세션에 처음 저장될 때 이 메서드가 호출될 수 있습니다.
    @ModelAttribute("cartService")
    public CartService cartService() {
        return new CartService(); // 세션에 없으면 새로 생성
    }

    @GetMapping
    public String viewCart(Model model) {
        model.addAttribute("cartItems", cartService.getCartDetails());
        return "cart"; // cart.html
    }

    @PostMapping("/add")
    public String addProductToCart(@RequestParam Long productId, @RequestParam Integer quantity,
                                   RedirectAttributes redirectAttributes) {
        try {
            cartService.addProductToCart(productId, quantity);
            redirectAttributes.addFlashAttribute("message", "상품이 장바구니에 추가되었습니다.");
        } catch (IllegalArgumentException e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
        }
        return "redirect:/cart";
    }

    @PostMapping("/update")
    public String updateCartItemQuantity(@RequestParam Long productId, @RequestParam Integer quantity,
                                         RedirectAttributes redirectAttributes) {
        cartService.updateCartItemQuantity(productId, quantity);
        redirectAttributes.addFlashAttribute("message", "장바구니 수량이 변경되었습니다.");
        return "redirect:/cart";
    }

    @PostMapping("/remove")
    public String removeProductFromCart(@RequestParam Long productId, RedirectAttributes redirectAttributes) {
        cartService.removeProductFromCart(productId);
        redirectAttributes.addFlashAttribute("message", "상품이 장바구니에서 제거되었습니다.");
        return "redirect:/cart";
    }

    @GetMapping("/checkout")
    public String showCheckoutForm(Model model) {
        model.addAttribute("cartItems", cartService.getCartDetails());
        // 사용자 정보 (배송지) 등을 모델에 추가
        return "checkout"; // checkout.html
    }

    @PostMapping("/checkout")
    public String placeOrder(@RequestParam Long userId, @RequestParam String shippingAddress,
                             RedirectAttributes redirectAttributes) {
        try {
            // userId는 현재 로그인된 사용자의 ID를 가져와야 함 (Spring Security 사용 시 Principal 객체에서)
            orderService.placeOrder(userId, cartService.getCartProductQuantities(), shippingAddress);
            cartService.clearCart(); // 주문 완료 후 장바구니 비우기
            redirectAttributes.addFlashAttribute("message", "주문이 성공적으로 완료되었습니다!");
            return "redirect:/orders/my"; // 주문 내역 페이지로 이동
        } catch (IllegalArgumentException e) {
            redirectAttributes.addFlashAttribute("error", "주문 실패: " + e.getMessage());
            return "redirect:/cart/checkout";
        }
    }
}
